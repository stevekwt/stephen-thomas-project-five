{"version":3,"sources":["firebase.js","DisplayForm.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DisplayForm","props","handleSubmit","e","preventDefault","state","userInput","length","nameInput","updateFirebase","timeSubmittedinMS","Date","now","item","date","name","document","querySelector","value","setState","handleInputChange","target","setTimeout","charsLeft","handleNameChange","removeGoal","goalId","removeFromFirebase","renderGoals","goalsArray","map","conciseNumbersDateAndTime","toLocaleString","className","changeDateOrder","orderDirection","selectedOrderingChoice","sort","b","a","console","log","handleDateOrderingChange","action","htmlFor","aria-hidden","id","placeholder","onChange","this","minLength","type","onClick","displayRandomThing","getRandomGoal","disabled","Component","App","randomItem","Math","floor","random","randomGoal","firebaseRef","bind","database","ref","undefined","push","child","remove","on","snapshot","firebaseDataObj","val","Object","values","off","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fe04a94b.chunk.js","sourcesContent":["// from https://firebase.google.com/docs/web/setup#using-module-bundlers\n// and https://github.com/HackerYou/bootcamp-notes/blob/master/react-and-firebase/using-firebase-with-react.md\n\n// import Firebase SDK from npm install firebase node package\n// Core firebase SDK\nimport firebase from \"firebase/app\";\n// Realtime database library\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAhusalV2PNOkZTGMJoF5jEdG6j1MyAwKQ\",\n    authDomain: \"continuity-fdab5.firebaseapp.com\",\n    databaseURL: \"https://continuity-fdab5.firebaseio.com\",\n    projectId: \"continuity-fdab5\",\n    storageBucket: \"continuity-fdab5.appspot.com\",\n    messagingSenderId: \"197882571705\",\n    appId: \"1:197882571705:web:d4d032992e5d5e0d586468\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import \"./App.scss\";\nimport { Component, Fragment } from \"react\";\nclass DisplayForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: \"\",\n      charsLeft: 1000,\n      nameInput: \"\",\n      selectedOrderingChoice: 'placeholder'\n    };\n  }\n\n  componentDidMount() {}\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.userInput.length >= 20 && this.state.userInput.length <= 1000 && this.state.nameInput.length >= 1){\n      // destructure firebase function object from this.props\n      const { updateFirebase } = this.props;\n      const timeSubmittedinMS = Date.now();\n      const thingGoingToFirebase = { \n        item: this.state.userInput, \n        date: timeSubmittedinMS,\n        name: this.state.nameInput\n      }\n      updateFirebase(thingGoingToFirebase);\n      // clear the text input field\n      document.querySelector(\"textarea\").value = \"\";\n      this.setState({\n        userInput: \"\",\n        nameInput: \"\"\n      })\n    }\n  };\n\n  handleInputChange = (e) => {\n    this.setState({\n      userInput: e.target.value\n    });\n    setTimeout(() => {\n      this.setState({\n        charsLeft: 1000 - this.state.userInput.length\n      });\n    },20)\n  };\n  handleNameChange = (e) => {\n    this.setState({\n      nameInput: e.target.value,\n    });\n  };\n\n  removeGoal = (goalId) => {\n    if (!goalId) return;\n    const { removeFromFirebase } = this.props;\n    removeFromFirebase(goalId);\n  };\n\n  renderGoals = (goalsArray) => {\n    if (!goalsArray.length) return <li>No ideas to show</li>;\n    // call changeDateOrder here, except solve the recursion problem\n    // this.changeDateOrder();\n    return goalsArray.map(({ date, item, name }) => {\n      const bigWordyDateAndTime = new Date(date);\n      const conciseNumbersDateAndTime = bigWordyDateAndTime.toLocaleString();\n      return (\n        <li key={date}>\n          <p><span className=\"ideaSpan\">{item}</span></p>\n          {/* <span> -- </span> */}\n          <p className=\"attribution\">\n            Added by <span className=\"dateSpan\">{name}</span> on <span className=\"dateSpan\">{conciseNumbersDateAndTime}</span>\n          </p>\n          {/* <button onClick={() => this.removeGoal(item)}>remove</button> */}\n        </li>\n      );\n    });\n  };\n\n  changeDateOrder = (orderDirection) => {\n    if (orderDirection === null) { orderDirection = this.state.selectedOrderingChoice};\n    const oldestFirst = ( a, b ) => {\n      if ( a.date < b.date ){\n        return -1;\n      }\n      if ( a.date > b.date ){\n        return 1;\n      }\n      return 0;\n    }\n    const newestFirst = ( b, a ) => {\n      if ( a.date < b.date ){\n        return -1;\n      }\n      if ( a.date > b.date ){\n        return 1;\n      }\n      return 0;\n    }\n    if (orderDirection === \"newest\") {\n      this.props.goalsArray.sort(newestFirst)\n    } else {\n      this.props.goalsArray.sort(oldestFirst)\n    }\n    console.log(`this.props.goalsArray after sort`, this.props.goalsArray);\n    this.renderGoals(this.props.goalsArray)\n  }\n\n  handleDateOrderingChange = (e) => {\n    e.preventDefault();\n    this.setState({\n      selectedOrderingChoice: e.target.value\n    })\n    this.changeDateOrder(e.target.value);\n    // this.renderGoals(this.props.goalsArray);\n  }\n  \n  render() {\n    return (\n      <Fragment>\n        \n        {/* // FORM */}\n        <section className=\"inputFormSection\">\n          <div className=\"internalFormDiv wrapper\">\n          <form action=\"\">\n\n            <label htmlFor=\"newGoal\" className=\"srOnly\" >What do you want someone to write about? 20 characters minimum â€” but go wild! Get as in-depth as you like. (Max 1000 characters, though.) </label>\n\n            <p className=\"newGoal\" aria-hidden=\"true\">What do you want someone to write about?</p>\n\n            <textarea id=\"newGoal\" className=\"ideaTextField\" placeholder=\"20 characters minimum â€” but go wild! Get as in-depth as you like.\" onChange={this.handleInputChange} minLength=\"20\" />\n\n            <p className=\"charCount\"> {this.state.userInput.length <= 1000 ? `${this.state.charsLeft} characters left` : \"Too many characters\"}</p>\n\n            <div className=\"nameAndButton\">\n\n              <label htmlFor=\"name\" className=\"srOnly\" >Your Name (required) </label>\n\n              <input type=\"text\" id=\"name\" className=\"nameField\" placeholder=\"Your Name (required)\" onChange={this.handleNameChange} minLength=\"1\" />\n\n              <button className=\"addButton\" onClick={this.handleSubmit}>Add</button>   \n\n            </div>         \n\n          </form>\n          </div>\n        </section>\n\n        {/* // RANDOM ITEM */}\n        <section className=\"randomItem\">\n          <div className=\"internalRandomDiv wrapper\">\n            <span className=\"randomIntroText\">Random Essay Idea: </span>\n              \n            <span className=\"randomEssayIdea\">{this.props.displayRandomThing}</span> \n\n            <button className=\"anotherButton\" onClick={this.props.getRandomGoal}>Show me another</button> \n          </div>\n        </section>\n\n        {/* // LIST OF ITEMS */}\n        <section className=\"itemList\">\n          <div className=\"internalListDiv wrapper\">\n            <h2>The Ideas</h2>\n\n            <form>\n                <label htmlFor=\"orderByDate\" className=\"srOnly\">Order by:</label>\n                <select \n                    name=\"orderByDate\" \n                    id=\"orderByDate\" \n                    onChange={this.handleDateOrderingChange}\n                    value={this.state.selectedOrderingChoice} >\n                        <option value=\"placeholder\" disabled>Order By:</option>\n                        <option value=\"newest\">Newest</option>\n                        <option value=\"oldest\">Oldest</option>\n                </select>\n            </form>\n\n            <ul>\n                {/* { this.state.selectedOrderingChoice=\"newest\" ? this.changeDateOrder() : this.renderGoals(this.props.goalsArray)} */}\n                {this.renderGoals(this.props.goalsArray)}\n            </ul>\n          </div>\n        </section>\n\n      </Fragment>\n    );\n  }\n}\nexport default DisplayForm;","import \"./App.scss\";\nimport firebase from \"./firebase.js\";\nimport { Component, Fragment } from \"react\";\nimport DisplayForm from \"./DisplayForm.js\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super();\n    this.state = {\n      goalsArray: [],\n      randomGoal: \"\",\n    };\n    this.firebaseRef = this.firebaseRef.bind(this);\n    this.updateFirebase = this.updateFirebase.bind(this);\n    this.removeFromFirebase = this.removeFromFirebase.bind(this);\n  }\n\n  // get reference to firebase and return it\n  firebaseRef() {\n    const dbRef = firebase.database().ref();\n    return dbRef;\n  }\n\n  //generic function to update firebase\n  updateFirebase(value) {\n    if (value === undefined || null) return;\n    const dbRef = this.firebaseRef();\n    dbRef.push(value);\n  }\n\n  //generic function to remove from firebase\n  removeFromFirebase(id) {\n    if (id === undefined || null) return;\n    const dbRef = this.firebaseRef();\n    dbRef.child(id).remove();\n  }\n\n  componentDidMount() {\n    const dbRef = this.firebaseRef();\n    dbRef.on(\"value\", (snapshot) => {\n      const firebaseDataObj = snapshot.val();\n      console.log(firebaseDataObj);\n      if (firebaseDataObj === null) {\n        return this.setState({ goalsArray: [] });\n      }\n      const goalsArray = Object.values(firebaseDataObj)\n      console.log(goalsArray);\n      this.setState({\n        goalsArray: goalsArray\n      });\n      console.log(this.state.goalsArray);\n      if (this.state.randomGoal === '') {\n        this.getRandomGoal();\n      } \n    });\n  }\n\n  componentWillUnmount() {\n    const dbRef = this.firebaseRef();\n    dbRef.off();\n  }\n\n  getRandomGoal = () => {\n    console.log(`inside getrandomgoals function`);\n    const goalsArray = this.state.goalsArray;\n    console.log(`goalsArray`, goalsArray);\n    const randomArrayIndex = Math.floor(Math.random() * goalsArray.length);\n    const randomItem = goalsArray[randomArrayIndex]?.item; \n    console.log(randomItem);\n    this.setState({\n      randomGoal: randomItem\n    })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <header>\n          <div className=\"internalHeader wrapper\">\n            <h1>Essay Idea DB</h1>\n          </div>\n        </header>\n\n        <DisplayForm\n          goalsArray={this.state.goalsArray}\n          updateFirebase={this.updateFirebase}\n          removeFromFirebase={this.removeFromFirebase}\n          displayRandomThing={this.state.randomGoal}\n          getRandomGoal={this.getRandomGoal}\n        />\n        \n      </Fragment>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}