{"version":3,"sources":["firebase.js","randomizers.js","DisplayRandomGoal.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DisplayRandomGoal","goal","console","log","generatedNumber","Math","floor","random","App","secondTestArray","handleSubmit","e","preventDefault","dbRef","database","ref","inputtedText","document","getElementById","value","push","state","goals","querySelector","handleInputChange","setState","userInput","target","removeGoal","goalId","child","remove","displayRandomGoalInternal","inputtedArray","randomArrayIndex","length","name","id","on","data","firebaseDataObj","val","goalsArray","propertyKey","formattedObj","this","action","htmlFor","type","onClick","className","message","array","map","Component","RandomStuff","props","QuestionForm","CoolBeans","displayRandomItem","testArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a1f0c50f.chunk.js","sourcesContent":["// from https://firebase.google.com/docs/web/setup#using-module-bundlers\n// and https://github.com/HackerYou/bootcamp-notes/blob/master/react-and-firebase/using-firebase-with-react.md\n\n// import Firebase SDK from npm install firebase node package\n// Core firebase SDK\nimport firebase from \"firebase/app\";\n// Realtime database library\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAhusalV2PNOkZTGMJoF5jEdG6j1MyAwKQ\",\n    authDomain: \"continuity-fdab5.firebaseapp.com\",\n    databaseURL: \"https://continuity-fdab5.firebaseio.com\",\n    projectId: \"continuity-fdab5\",\n    storageBucket: \"continuity-fdab5.appspot.com\",\n    messagingSenderId: \"197882571705\",\n    appId: \"1:197882571705:web:d4d032992e5d5e0d586468\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","// create a data structure that holds my colors\nexport const colors = {\n    \"yellow\": 1,\n    \"red\": 2,\n    \"blue\": 3\n}\n\n\n// create a function which serves up a random color\nexport function randomColor(colorsArray) {\n    const randomArrayIndex = Math.floor(Math.random() * colorsArray.length);\n    \n    // get a random color from the color array\n    return colorsArray[randomArrayIndex];\n}\n\n\nconst DisplayRandomGoal = ({goal }) => {\n    return (\n        <li className=\"goalItem\">\n            Goal: <strong>{goal}</strong>\n        </li>\n    )\n}\n\nexport default DisplayRandomGoal;\n\n\n\n// console.log( randomColor(colors) );\nexport const greeting = \"hello\";\n// export { greeting };\n\n// COMPLETELY UNRELATED TO ABOVE, just for testing/proof of concept\nexport const randomNumber = () => {\n    return Math.floor(Math.random() * 70);\n}","\nconst DisplayRandomGoal = ({ goal }) => {\n    console.log(`goal in dedicated component is`, goal);\n    return (\n        <span>\n            <strong> {goal}</strong> \n        </span>\n    )\n}\n\nexport default DisplayRandomGoal;\n","import './App.css';\nimport firebase from './firebase.js';\nimport { Component } from 'react';\nimport { randomNumber } from './randomizers.js';\nimport DisplayRandomGoal from './DisplayRandomGoal.js';\n\n// 1. configure firebase on react -- \n// 2. connect firebase data to the state -- \n// 3. map through the 'goal' state to display each 'goal' -- \n// 4. add remove button\n// 5. on remove button click, remove the 'goal' that was clicked on, remove it from firebase\n// 6. create input form, to get user input value \n// 7. on submit of form, submit user input value to firebase\n\n// getRandomNumber = () => {\nconst generatedNumber = randomNumber();\n  // }\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      goals: [\n        {\n          id: \"1\",\n          goal: \"testing 123\"\n        }\n      ],\n      userInput: ''\n    }\n  }\n\n  secondTestArray = [\n    7, 8, 9, 10, 11, 12\n  ]\n\n  componentDidMount() {\n    // \"Here we create a variable that holds a reference to our database\"\n    const dbRef = firebase.database().ref()\n    // TODO\n    console.log(`COMPONENT MOUNTED, and dbRef is`, dbRef);\n    // \"add an event listener to that variable that fires\n    // every time there is a change in the database.\n    // Event listener takes a callback function that gets our data\"\n    dbRef.on('value', (data) => {\n          // use Firebase's .val() method to parse our database info the way we want it\n          const firebaseDataObj = data.val();\n          // TODO\n          console.log(`VALUE CHANGED, AND firebaseDataObj is`, firebaseDataObj);\n          // make a new empty array for goals\n          let goalsArray = [];\n          // use for-in loop to loop through the object we get from firebase\n          for (let propertyKey in firebaseDataObj) {\n                // propertyKey = 'g1', 'g2' etc\n                // extracting the key and value of the object\n                const propertyVal = firebaseDataObj[propertyKey];\n                // console.log(`propertyVal is`, propertyVal);\n                // format it to the way we want it\n                const formattedObj = { id: propertyKey, name: propertyVal }\n                // push each new item in the loop into the empty array\n                goalsArray.push(formattedObj);\n          }\n          // TODO\n          console.log(`goalsArray (temporary array created upon mount) is`, goalsArray);\n          // updating our this.state.goals state with firebase data\n          this.setState({\n            goals: goalsArray\n          })\n    })\n  }\n  \n  handleSubmit = (e) => {\n    e.preventDefault();\n    \n    // on form submit, ping firebase and create a reference object with the most up-to-date version of the data\n    const dbRef = firebase.database().ref();\n    \n    // is there a way to grab the form submit w/o the key-by-key method?\n    // console.log(e);\n    const inputtedText = document.getElementById(\"newGoal\").value;\n    console.log(inputtedText);\n\n    // add (push) the user's input, as grabbed by button submit, \n    // dbRef.push(this.state.userInput);\n    dbRef.push(inputtedText);\n    // TODO\n    console.log(`this.state.goals is ${this.state.goals}`);\n    // clear the text input field\n    document.querySelector('input').value = '';\n  }\n\n  handleInputChange = (e) => {\n    // console.log(`e.target.value is`, e.target.value);\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  removeGoal = (goalId) => {\n    const dbRef = firebase.database().ref();\n    // a way to remove a record off the face of firebase\n    // .child() is going to locate the particular record\n    // .remove() is going to remove the record\n    dbRef.child(goalId).remove();\n  }\n\n  displayRandomGoalInternal = (inputtedArray) => {\n    const randomArrayIndex = Math.floor(Math.random() * inputtedArray.length);\n    console.log(`randomArrayIndex is`, randomArrayIndex);\n    console.log(`inputtedArray[randomArrayIndex] is`, inputtedArray[randomArrayIndex]);\n    // get the goal property of a random item from the array\n    return inputtedArray[randomArrayIndex].name;\n  }\n\n  render() {\n    console.log(`this.state.goals is`, this.state.goals);\n    console.log(this.displayRandomGoalInternal(this.state.goals));\n    // console.log(thisremoveGoal());\n    return (\n      <div>\n        <h1>Essay Idea DB</h1>\n\n        <form action=\"\">\n          <label htmlFor=\"newGoal\">What do you want someone to write about? </label>\n          <input\n            type=\"text\"\n            id=\"newGoal\"\n            // onChange={this.handleInputChange}\n          />\n          <button onClick={this.handleSubmit}>Add</button>\n        </form>\n\n        <QuestionForm\n\n        />\n\n        <div className=\"mainDisplayGoal\">\n          <p>\n            Random number: <strong>{generatedNumber}</strong>\n          </p>\n\n          <p>Now a randomly displayed goal from internal function:&nbsp;<strong>\n            {this.displayRandomGoalInternal(this.state.goals)}</strong>\n          </p>\n\n          <p>\n            And from the external component:\n              <DisplayRandomGoal\n                  // item={this.state.goals[0].id}\n                  goal={this.displayRandomGoalInternal(this.state.goals)}\n              />\n          </p>\n          <p>\n            And from the component where the randomizing logic is done in-component:\n            <RandomStuff\n              message={\"hello\"}\n            />\n          </p>\n\n          <p>\n            And cool beans business:&nbsp;\n            <CoolBeans \n              array={this.state.goals}\n            />\n          </p>\n\n        </div>\n\n        <ul>\n          {\n            this.state.goals.map((goal) => {\n              // console.log(`goal.name is`, goal.name);\n              return (\n                <li key={goal.id}>\n                  <p>{goal.name} </p>\n                  <button onClick={ () => (this.removeGoal(goal.id)) }>remove</button>\n                </li>\n              )\n            })\n          }\n        </ul>\n\n      </div>\n    )\n  }\n}\n\nclass RandomStuff extends Component {\n  render() {\n    const hello = 'say hello';\n    return (\n      <div>\n        <span><strong>{this.props.message}</strong></span>\n      </div>\n    )\n  }\n}\n\nclass QuestionForm extends Component {\n  render() {\n    return (\n      <form action=\"\">\n        <label htmlFor=\"newGoal\">(external class form) What someone should write? </label>\n        <input\n          type=\"text\"\n          id=\"newGoal\"\n        // onChange={this.handleInputChange}\n        />\n        <button onClick={this.handleSubmit}>Add</button>\n      </form>\n    )\n  }\n}\n\nclass CoolBeans extends Component {\n  displayRandomItem = (inputtedArray) => {\n    const randomArrayIndex = Math.floor(Math.random() * inputtedArray.length);\n    console.log(`randomArrayIndex is`, randomArrayIndex);\n    console.log(`inputtedArray[randomArrayIndex] is`, inputtedArray[randomArrayIndex]);\n    // get the goal property of a random item from the array\n    return inputtedArray[randomArrayIndex].name;\n  }\n  testArray = [\n    1, 2, 3, 4, 5\n  ]\n  render () {\n    return (\n      <span>\n        <strong> \n          {this.displayRandomItem(this.props.array)}\n        </strong>\n      </span>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}