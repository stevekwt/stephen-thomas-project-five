[{"/Users/skwt/REACT-APPS/proj5/Continuity/src/reportWebVitals.js":"1","/Users/skwt/REACT-APPS/proj5/Continuity/src/randomizers.js":"2","/Users/skwt/REACT-APPS/proj5/Continuity/src/App.js":"3","/Users/skwt/REACT-APPS/proj5/Continuity/src/DisplayRandomGoal.js":"4","/Users/skwt/REACT-APPS/proj5/Continuity/src/firebase.js":"5"},{"size":362,"mtime":1606595290783,"results":"6","hashOfConfig":"7"},{"size":826,"mtime":1606768200431,"results":"8","hashOfConfig":"7"},{"size":7158,"mtime":1606787027740,"results":"9","hashOfConfig":"7"},{"size":225,"mtime":1606768474124,"results":"10","hashOfConfig":"7"},{"size":827,"mtime":1606596517803,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"138b9pi",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/skwt/REACT-APPS/proj5/Continuity/src/reportWebVitals.js",[],"/Users/skwt/REACT-APPS/proj5/Continuity/src/randomizers.js",[],"/Users/skwt/REACT-APPS/proj5/Continuity/src/App.js",["24"],"import './App.css';\nimport firebase from './firebase.js';\nimport { Component } from 'react';\nimport { randomNumber } from './randomizers.js';\nimport DisplayRandomGoal from './DisplayRandomGoal.js';\n\n// 1. configure firebase on react -- \n// 2. connect firebase data to the state -- \n// 3. map through the 'goal' state to display each 'goal' -- \n// 4. add remove button\n// 5. on remove button click, remove the 'goal' that was clicked on, remove it from firebase\n// 6. create input form, to get user input value \n// 7. on submit of form, submit user input value to firebase\n\n// getRandomNumber = () => {\nconst generatedNumber = randomNumber();\n  // }\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      goals: [\n        {\n          id: \"1\",\n          goal: \"testing 123\"\n        }\n      ],\n      userInput: ''\n    }\n  }\n\n  secondTestArray = [\n    7, 8, 9, 10, 11, 12\n  ]\n\n  componentDidMount() {\n    // \"Here we create a variable that holds a reference to our database\"\n    const dbRef = firebase.database().ref()\n    // TODO\n    console.log(`COMPONENT MOUNTED, and dbRef is`, dbRef);\n    // \"add an event listener to that variable that fires\n    // every time there is a change in the database.\n    // Event listener takes a callback function that gets our data\"\n    dbRef.on('value', (data) => {\n          // use Firebase's .val() method to parse our database info the way we want it\n          const firebaseDataObj = data.val();\n          // TODO\n          console.log(`VALUE CHANGED, AND firebaseDataObj is`, firebaseDataObj);\n          // make a new empty array for goals\n          let goalsArray = [];\n          // use for-in loop to loop through the object we get from firebase\n          for (let propertyKey in firebaseDataObj) {\n                // propertyKey = 'g1', 'g2' etc\n                // extracting the key and value of the object\n                const propertyVal = firebaseDataObj[propertyKey];\n                // console.log(`propertyVal is`, propertyVal);\n                // format it to the way we want it\n                const formattedObj = { id: propertyKey, name: propertyVal }\n                // push each new item in the loop into the empty array\n                goalsArray.push(formattedObj);\n          }\n          // TODO\n          console.log(`goalsArray (temporary array created upon mount) is`, goalsArray);\n          // updating our this.state.goals state with firebase data\n          this.setState({\n            goals: goalsArray\n          })\n    })\n  }\n  \n  handleSubmit = (e) => {\n    e.preventDefault();\n    \n    // on form submit, ping firebase and create a reference object with the most up-to-date version of the data\n    const dbRef = firebase.database().ref();\n    \n    // is there a way to grab the form submit w/o the key-by-key method?\n    // console.log(e);\n    const inputtedText = document.getElementById(\"newGoal\").value;\n    console.log(inputtedText);\n\n    // add (push) the user's input, as grabbed by button submit, \n    // dbRef.push(this.state.userInput);\n    dbRef.push(inputtedText);\n    // TODO\n    console.log(`this.state.goals is ${this.state.goals}`);\n    // clear the text input field\n    document.querySelector('input').value = '';\n  }\n\n  handleInputChange = (e) => {\n    // console.log(`e.target.value is`, e.target.value);\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  removeGoal = (goalId) => {\n    const dbRef = firebase.database().ref();\n    // a way to remove a record off the face of firebase\n    // .child() is going to locate the particular record\n    // .remove() is going to remove the record\n    dbRef.child(goalId).remove();\n  }\n\n  displayRandomGoalInternal = (inputtedArray) => {\n    const randomArrayIndex = Math.floor(Math.random() * inputtedArray.length);\n    console.log(`randomArrayIndex is`, randomArrayIndex);\n    console.log(`inputtedArray[randomArrayIndex] is`, inputtedArray[randomArrayIndex]);\n    // get the goal property of a random item from the array\n    return inputtedArray[randomArrayIndex].name;\n  }\n\n  render() {\n    console.log(`this.state.goals is`, this.state.goals);\n    console.log(this.displayRandomGoalInternal(this.state.goals));\n    // console.log(thisremoveGoal());\n    return (\n      <div>\n        <h1>Essay Idea DB</h1>\n\n        <form action=\"\">\n          <label htmlFor=\"newGoal\">What do you want someone to write about? </label>\n          <input\n            type=\"text\"\n            id=\"newGoal\"\n            // onChange={this.handleInputChange}\n          />\n          <button onClick={this.handleSubmit}>Add</button>\n        </form>\n\n        <QuestionForm\n\n        />\n\n        <div className=\"mainDisplayGoal\">\n          <p>\n            Random number: <strong>{generatedNumber}</strong>\n          </p>\n\n          <p>Now a randomly displayed goal from internal function:&nbsp;<strong>\n            {this.displayRandomGoalInternal(this.state.goals)}</strong>\n          </p>\n\n          <p>\n            And from the external component:\n              <DisplayRandomGoal\n                  // item={this.state.goals[0].id}\n                  goal={this.displayRandomGoalInternal(this.state.goals)}\n              />\n          </p>\n          <p>\n            And from the component where the randomizing logic is done in-component:\n            <RandomStuff\n              message={\"hello\"}\n            />\n          </p>\n\n          <p>\n            And cool beans business:&nbsp;\n            <CoolBeans \n              array={this.state.goals}\n            />\n          </p>\n\n        </div>\n\n        <ul>\n          {\n            this.state.goals.map((goal) => {\n              // console.log(`goal.name is`, goal.name);\n              return (\n                <li key={goal.id}>\n                  <p>{goal.name} </p>\n                  <button onClick={ () => (this.removeGoal(goal.id)) }>remove</button>\n                </li>\n              )\n            })\n          }\n        </ul>\n\n      </div>\n    )\n  }\n}\n\nclass RandomStuff extends Component {\n  render() {\n    const hello = 'say hello';\n    return (\n      <div>\n        <span><strong>{this.props.message}</strong></span>\n      </div>\n    )\n  }\n}\n\nclass QuestionForm extends Component {\n  render() {\n    return (\n      <form action=\"\">\n        <label htmlFor=\"newGoal\">(external class form) What someone should write? </label>\n        <input\n          type=\"text\"\n          id=\"newGoal\"\n        // onChange={this.handleInputChange}\n        />\n        <button onClick={this.handleSubmit}>Add</button>\n      </form>\n    )\n  }\n}\n\nclass CoolBeans extends Component {\n  displayRandomItem = (inputtedArray) => {\n    const randomArrayIndex = Math.floor(Math.random() * inputtedArray.length);\n    console.log(`randomArrayIndex is`, randomArrayIndex);\n    console.log(`inputtedArray[randomArrayIndex] is`, inputtedArray[randomArrayIndex]);\n    // get the goal property of a random item from the array\n    return inputtedArray[randomArrayIndex].name;\n  }\n  testArray = [\n    1, 2, 3, 4, 5\n  ]\n  render () {\n    return (\n      <span>\n        <strong> \n          {this.displayRandomItem(this.props.array)}\n        </strong>\n      </span>\n    )\n  }\n}\n\nexport default App;\n",["25","26"],"/Users/skwt/REACT-APPS/proj5/Continuity/src/DisplayRandomGoal.js",[],"/Users/skwt/REACT-APPS/proj5/Continuity/src/firebase.js",[],{"ruleId":"27","severity":1,"message":"28","line":191,"column":11,"nodeType":"29","messageId":"30","endLine":191,"endColumn":16},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"no-unused-vars","'hello' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-global-assign","no-unsafe-negation"]